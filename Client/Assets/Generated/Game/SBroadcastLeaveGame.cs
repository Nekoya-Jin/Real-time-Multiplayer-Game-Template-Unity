// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Game
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SBroadcastLeaveGame : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SBroadcastLeaveGame GetRootAsSBroadcastLeaveGame(ByteBuffer _bb) { return GetRootAsSBroadcastLeaveGame(_bb, new SBroadcastLeaveGame()); }
  public static SBroadcastLeaveGame GetRootAsSBroadcastLeaveGame(ByteBuffer _bb, SBroadcastLeaveGame obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SBroadcastLeaveGame __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Game.SBroadcastLeaveGame> CreateSBroadcastLeaveGame(FlatBufferBuilder builder,
      int playerId = 0) {
    builder.StartTable(1);
    SBroadcastLeaveGame.AddPlayerId(builder, playerId);
    return SBroadcastLeaveGame.EndSBroadcastLeaveGame(builder);
  }

  public static void StartSBroadcastLeaveGame(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPlayerId(FlatBufferBuilder builder, int playerId) { builder.AddInt(0, playerId, 0); }
  public static Offset<Game.SBroadcastLeaveGame> EndSBroadcastLeaveGame(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Game.SBroadcastLeaveGame>(o);
  }
}


static public class SBroadcastLeaveGameVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*PlayerId*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
