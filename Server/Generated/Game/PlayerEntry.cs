// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Game
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PlayerEntry : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PlayerEntry GetRootAsPlayerEntry(ByteBuffer _bb) { return GetRootAsPlayerEntry(_bb, new PlayerEntry()); }
  public static PlayerEntry GetRootAsPlayerEntry(ByteBuffer _bb, PlayerEntry obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlayerEntry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool IsSelf { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int PlayerId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Game.Vec3? Pos { get { int o = __p.__offset(8); return o != 0 ? (Game.Vec3?)(new Game.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartPlayerEntry(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddIsSelf(FlatBufferBuilder builder, bool isSelf) { builder.AddBool(0, isSelf, false); }
  public static void AddPlayerId(FlatBufferBuilder builder, int playerId) { builder.AddInt(1, playerId, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<Game.Vec3> posOffset) { builder.AddStruct(2, posOffset.Value, 0); }
  public static Offset<Game.PlayerEntry> EndPlayerEntry(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Game.PlayerEntry>(o);
  }
}


static public class PlayerEntryVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*IsSelf*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 6 /*PlayerId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Pos*/, 12 /*Game.Vec3*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
